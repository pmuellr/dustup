// Generated by CoffeeScript 1.4.0
var Bolt, Inlet, Outlet, addInletsToBolt, addOutletsToBolt, calculateInAndOut, dustup, emit, util,
  __hasProp = {}.hasOwnProperty;

util = require("util");

dustup = exports;

dustup.Bolt = Bolt = (function() {

  Bolt.connect = function(lets) {
    var inlet, outlet, _ref;
    _ref = calculateInAndOut(lets), inlet = _ref[0], outlet = _ref[1];
    return outlet.addInlet(inlet);
  };

  Bolt.disconnect = function(lets) {
    var inlet, outlet, _ref;
    _ref = calculateInAndOut(lets), inlet = _ref[0], outlet = _ref[1];
    return outlet.removeInlet(inlet);
  };

  Bolt.nextTick = function(func) {
    return process.nextTick(func);
  };

  function Bolt(letSpec) {
    this.lets = {};
    this.name = letSpec != null ? letSpec.name : void 0;
    addInletsToBolt(this, letSpec != null ? letSpec.inlets : void 0);
    addOutletsToBolt(this, letSpec != null ? letSpec.outlets : void 0);
  }

  Bolt.prototype.emit = function(name, data) {
    var object, outlet;
    if (arguments.length === 1) {
      object = name;
      for (name in object) {
        if (!__hasProp.call(object, name)) continue;
        data = object[name];
        this.emit(name, data);
      }
      return this;
    }
    outlet = this.lets[name];
    if (!(outlet instanceof Outlet)) {
      throw new TypeError("no outlet named '" + name + "'");
    }
    outlet.emit(data);
    return this;
  };

  Bolt.prototype.toString = function() {
    if (!(this.name != null)) {
      return "[Bolt <unnamed>]";
    }
    return "[Bolt " + this.name + "]";
  };

  return Bolt;

})();

addInletsToBolt = function(bolt, inlets) {
  var name, reader;
  if (!(inlets != null)) {
    return;
  }
  for (name in inlets) {
    if (!__hasProp.call(inlets, name)) continue;
    reader = inlets[name];
    if (typeof reader !== "function") {
      throw new TypeError("expecting a function for inlet property '" + name + "'");
    }
    bolt.lets[name] = new Inlet(bolt, name, reader);
  }
};

addOutletsToBolt = function(bolt, outlets) {
  var desc, name;
  if (!(outlets != null)) {
    return;
  }
  for (name in outlets) {
    if (!__hasProp.call(outlets, name)) continue;
    desc = outlets[name];
    bolt.lets[name] = new Outlet(bolt, name, desc);
  }
};

calculateInAndOut = function(lets) {
  var bolt, letA, letAin, letB, letBin, name, _ref;
  lets = (function() {
    var _results;
    _results = [];
    for (name in lets) {
      if (!__hasProp.call(lets, name)) continue;
      bolt = lets[name];
      if (!(bolt instanceof Bolt)) {
        throw new TypeError("expecting a bolt value for property '" + name + "'");
      }
      _results.push({
        name: name,
        bolt: bolt
      });
    }
    return _results;
  })();
  if (lets.length !== 2) {
    throw new TypeError("expecting two properties in the connection spec");
  }
  letA = lets[0], letB = lets[1];
  letAin = letA.bolt.lets[letA.name] instanceof Inlet;
  letBin = letB.bolt.lets[letB.name] instanceof Inlet;
  if (letAin && letBin) {
    throw new TypeError("connection spec for two inlets");
  }
  if (!letAin && !letBin) {
    throw new TypeError("connection spec fo two outlets");
  }
  if (!letAin) {
    _ref = [letA, letB], letB = _ref[0], letA = _ref[1];
  }
  return [letA.bolt.lets[letA.name], letB.bolt.lets[letB.name]];
};

Inlet = (function() {

  function Inlet(bolt, name, reader) {
    this.bolt = bolt;
    this.name = name;
    this.reader = reader;
  }

  return Inlet;

})();

Outlet = (function() {

  function Outlet(bolt, name, descr) {
    this.bolt = bolt;
    this.name = name;
    this.descr = descr;
    this.inlets = [];
  }

  Outlet.prototype.emit = function(data) {
    var bolt, inlet, name, _i, _len, _ref;
    _ref = this.inlets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      inlet = _ref[_i];
      bolt = this.bolt;
      name = this.name;
      Bolt.nextTick(function() {
        return emit(bolt, name, inlet, data);
      });
    }
    return this;
  };

  Outlet.prototype.addInlet = function(inlet) {
    return this.inlets.push(inlet);
  };

  Outlet.prototype.removeInlet = function(inlet) {
    var inletTest, inlets, _i, _len, _ref;
    inlets = [];
    _ref = this.inlets;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      inletTest = _ref[_i];
      if (inletTest !== inlet) {
        inlets.push(inlet);
      }
    }
    return this.inlets = inlets;
  };

  return Outlet;

})();

emit = function(emittingBolt, outletName, inlet, data) {
  var errlet, packet;
  errlet = inlet.bolt.lets["error"];
  if (!(errlet instanceof Inlet)) {
    return inlet.reader.call(inlet.bolt, data);
  } else {
    try {
      return inlet.reader.call(inlet.bolt, data);
    } catch (err) {
      packet = {
        outletBolt: emittingBolt,
        outletName: outletName,
        inletBolt: inlet.bolt,
        inletName: inlet.name,
        data: data,
        error: err
      };
      return inlet.bolt.lets["error"].reader.call(inlet.bolt, packet);
    }
  }
};
